{"version":3,"sources":["contexts/movement-context.tsx","components/controls.tsx","birdControls/birdControls.js","components/bird-camera.tsx","components/lightbulb.tsx","components/cuboids.tsx","hooks/use-random.tsx","components/world.tsx","components/canvas-content.tsx","components/three-canvas.tsx","style/global-style.tsx","contexts/movement-context-actions.tsx","contexts/providers/movement-context-provider.tsx","images/arrow-white.svg","images/arrow-white-pressed.svg","components/camera-control-buttons.tsx","contexts/device-context.tsx","contexts/providers/device-context-provider.tsx","App.tsx","index.tsx"],"names":["MovementContext","React","createContext","isMovingForward","isMovingBackward","isTurningRight","isTurningLeft","extend","BirdControls","object","domElement","this","movementSpeed","lookSpeed","panSpeed","moveForward","moveBackward","viewHalfX","viewHalfY","lat","lon","document","setAttribute","setMoveForward","setMoveBackward","setPanSpeed","handleResize","window","innerWidth","innerHeight","offsetWidth","offsetHeight","update","targetPosition","Vector3","delta","actualMoveSpeed","autoForward","translateZ","actualLookSpeed","Math","max","min","phi","MathUtils","degToRad","theta","position","setFromSphericalCoords","add","lookAt","Controls","props","controlsRef","useRef","gl","useThree","movementContext","useContext","useFrame","state","current","useEffect","args","ref","BirdCamera","birdRef","set","size","cameraRef","useLayoutEffect","aspect","width","height","updateProjectionMatrix","camera","rotation","color","intensity","distance","decay","castShadow","COLORS","mesh","light","COLORS_HOVER","Lightbulb","useState","textCanvasWidth","setTextCanvasWidth","textCanvasHeight","setTextCanvasHeight","textRefNode","setTextRefNode","colors","setColors","lightRef","lowLightRef","groupRef","lightPositionY","isFontLoaded","setIsFontLoaded","isClicked","setIsClicked","fonts","ready","then","textRef","useCallback","node","lowLightPosition","useMemo","lightPosition","copy","textScale","textPosition","boundingBox","Box3","setFromObject","textLength","y","texture","ctx","createElement","getContext","Error","font","measureText","text","borderSize","canvas","textBaseline","fillStyle","fillText","CanvasTexture","minFilter","LinearFilter","scale","onPointerOver","body","style","cursor","onClick","onPointerOut","emissive","Color","emissiveIntensity","PI","map","side","DoubleSide","transparent","Cuboids","random","sequenceSeed","seed","sinusRandom","x","sin","floor","round","useRandomGenerator","instancedMeshRef","gluedIndexes","Array","numCuboids","item","index","lift","setInterval","shift","transform","Matrix4","i","worldSize","z","abs","makeScale","setPosition","setMatrixAt","clock","elapsedTime","currentGluedIndexes","indexOf","matrix","getMatrixAt","setFromMatrixPosition","instanceMatrix","needsUpdate","receiveShadow","attach","World","isLightbulbClicked","setIsLightbulbClicked","lightbulbPositions","flatShading","CanvasContent","shadowMap","enabled","type","PCFSoftShadowMap","setPixelRatio","devicePixelRatio","StyledCanvas","styled","Canvas","ThreeCanvas","Provider","value","GlobalStyle","createGlobalStyle","MovementContextActions","setIsMovingForward","setIsMovingBackward","setIsTurningLeft","setIsTurningRight","MovementContextProvider","movementContextActions","children","ButtonSize","ButtonMixin","isActive","css","arrowWhite","arrowWhitePressed","StyledButtonUp","div","StyledButtonLeft","StyledButtonRight","StyledButtonDown","StyledRoot","StyledGrid","StyledText","CameraControlButtons","onKeyDown","event","code","onKeyUp","addEventListener","removeEventListener","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","DeviceContext","device","DeviceContextProvider","getActiveDevice","setDevice","StyledFontWorkaround","App","isFirstRender","setIsFirstRender","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7861b21b.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface MovementContextType {\n    isMovingForward: boolean;\n    isMovingBackward: boolean;\n    isTurningRight: boolean;\n    isTurningLeft: boolean;\n}\n\nexport const MovementContext = React.createContext<MovementContextType>({\n    isMovingForward: false,\n    isMovingBackward: false,\n    isTurningRight: false,\n    isTurningLeft: false,\n});\n\nexport default MovementContext;\n","import React, {MutableRefObject, useContext, useEffect, useRef} from 'react'\nimport {extend, useFrame, useThree} from \"@react-three/fiber\";\nimport {BirdControls} from \"../birdControls/birdControls\";\nimport {Object3D} from \"three/src/core/Object3D\";\nimport {BirdControlsType} from \"../birdControls/birdControlsType\";\nimport MovementContext from \"../contexts/movement-context\";\n\nextend({ BirdControls });\n\nexport interface ControlsProps {\n    object: MutableRefObject<Object3D | null>;\n}\n\nfunction Controls(props: ControlsProps) {\n    const controlsRef = useRef<BirdControlsType>(null)\n    const { gl } = useThree();\n\n    const movementContext = useContext(MovementContext);\n\n    useFrame((state, delta) => {\n        if (!controlsRef || !controlsRef.current) {\n            return;\n        }\n\n        controlsRef.current.update(delta);\n    });\n\n    useEffect(() => {\n        if (!controlsRef || !controlsRef.current) {\n            return;\n        }\n\n        controlsRef.current.setMoveForward(movementContext.isMovingForward)\n    }, [movementContext.isMovingForward]);\n\n    useEffect(() => {\n        if (!controlsRef || !controlsRef.current) {\n            return;\n        }\n\n        controlsRef.current.setMoveBackward(movementContext.isMovingBackward)\n    }, [movementContext.isMovingBackward]);\n\n    useEffect(() => {\n        if (!controlsRef || !controlsRef.current) {\n            return;\n        }\n\n        movementContext.isTurningRight ? controlsRef.current.setPanSpeed(500) : controlsRef.current.setPanSpeed(0)\n    }, [movementContext.isTurningRight]);\n\n    useEffect(() => {\n        if (!controlsRef || !controlsRef.current) {\n            return;\n        }\n\n        movementContext.isTurningLeft ? controlsRef.current.setPanSpeed(-500) : controlsRef.current.setPanSpeed(0)\n    }, [movementContext.isTurningLeft]);\n\n\n    if (!props.object || !props.object.current) {\n        return <></>\n    }\n\n    return (\n        <birdControls\n            args={[props.object.current, gl.domElement]}\n            ref={controlsRef}\n            movementSpeed={500}\n            lookSpeed={0.1}\n        />\n    )\n}\n\nexport default Controls\n","import {\n    MathUtils,\n    Vector3\n} from 'three';\n\n// based on https://github.com/mrdoob/three.js/blob/dev/examples/jsm/controls/FirstPersonControls.js\n\nconst BirdControls = function (object, domElement ) {\n    // set by constructor (property 'arg')\n    this.object = object;\n    this.domElement = domElement;\n\n    // set by property\n    this.movementSpeed = 1.0;\n    this.lookSpeed = 0.005;\n\n    // internals\n    this.panSpeed = 0;\n\n    this.moveForward = false;\n    this.moveBackward = false;\n\n    this.viewHalfX = 0;\n    this.viewHalfY = 0;\n\n    var lat = 0;\n    var lon = 0;\n\n    if ( this.domElement !== document ) {\n        this.domElement.setAttribute( 'tabindex', - 1 );\n    }\n\n    this.setMoveForward = function(isMovingForward) {\n        this.moveForward = isMovingForward;\n    }\n\n    this.setMoveBackward = function(isMovingBackward) {\n        this.moveBackward = isMovingBackward;\n    }\n\n    this.setPanSpeed = function(panSpeed) {\n        this.panSpeed = panSpeed;\n    }\n\n\n    this.handleResize = function () {\n        if ( this.domElement === document ) {\n            this.viewHalfX = window.innerWidth / 2;\n            this.viewHalfY = window.innerHeight / 2;\n        } else {\n            this.viewHalfX = this.domElement.offsetWidth / 2;\n            this.viewHalfY = this.domElement.offsetHeight / 2;\n        }\n    };\n\n    this.update = function () {\n\n        var targetPosition = new Vector3();\n\n        return function update( delta ) {\n            var actualMoveSpeed = delta * this.movementSpeed;\n\n            if ( this.moveForward || ( this.autoForward && ! this.moveBackward ) ) {\n                this.object.translateZ( - ( actualMoveSpeed  ) );\n            }\n            if ( this.moveBackward ) this.object.translateZ( actualMoveSpeed );\n\n            var actualLookSpeed = delta * this.lookSpeed;\n\n            lon -= this.panSpeed * actualLookSpeed;\n            lat = Math.max( - 85, Math.min( 85, lat ) );\n            var phi = MathUtils.degToRad( 90 - lat );\n            var theta = MathUtils.degToRad( lon );\n            var position = this.object.position;\n            targetPosition.setFromSphericalCoords( 1, phi, theta ).add( position );\n\n            this.object.lookAt( targetPosition );\n        };\n    }();\n    //\n    // this.dispose = function () {\n    // };\n\n    // function bind( scope, fn ) {\n    //     return function () {\n    //         fn.apply( scope, arguments );\n    //     };\n    // }\n\n    this.handleResize();\n};\n\nexport { BirdControls };","import React, {useLayoutEffect, useRef} from \"react\";\nimport {useThree, Vector3} from \"@react-three/fiber\";\nimport Controls from \"./controls\";\nimport {Group, PerspectiveCamera} from \"three\";\n\nexport interface CameraProps {\n    position: Vector3;\n}\n\nexport default function BirdCamera(props: CameraProps) {\n    const birdRef= useRef<Group>(null);\n    const set = useThree(state => state.set);\n    const size = useThree(state => state.size);\n    const cameraRef = useRef<PerspectiveCamera>(null);\n\n    useLayoutEffect(() => {\n        if (cameraRef.current) {\n            cameraRef.current.aspect = size.width / size.height\n            cameraRef.current.updateProjectionMatrix()\n        }\n    }, [size]);\n\n    useLayoutEffect(() => {\n        if (!cameraRef.current) {\n            return;\n        }\n        set({ camera: cameraRef.current });\n    }, [set, size.height, size.width])\n\n    return (\n        <>\n            <group ref={birdRef} position={props.position}>\n                <group rotation={[-0.3,0, 0]}>\n                    <perspectiveCamera ref={cameraRef}  />\n                </group>\n\n                <pointLight\n                    color={\"white\"}\n                    intensity={1}\n                    distance={300}\n                    decay={2}\n                    castShadow={false}\n                    position={[0,0,0]}\n                />\n            </group>\n\n\n            <Controls object={birdRef}/>\n        </>\n    )\n\n}","import React, {useCallback, useEffect, useMemo, useRef, useState} from \"react\";\nimport {\n    Box3, CanvasTexture,\n    Color,\n    DoubleSide, Group, LinearFilter, Mesh, PointLight,\n} from \"three\";\nimport {Vector3} from \"three/src/math/Vector3\";\n\nconst LOW_LIGHT_OFFSET = 30;\n\nconst COLORS = {\n    mesh: \"#ffffff\",\n    light: \"#ffffff\"\n}\nconst COLORS_HOVER = {\n    mesh: \"#FF0500\",\n    light: \"#FF0000\",\n}\n\nexport interface IlluminatedMeshProps {\n    position: Vector3;\n    text: string;\n    height: number;\n    onClick: () => void;\n}\n\nexport default function Lightbulb(props: IlluminatedMeshProps) {\n    const [textCanvasWidth, setTextCanvasWidth] = useState(0);\n    const [textCanvasHeight, setTextCanvasHeight] = useState(0);\n    const [textRefNode, setTextRefNode] = useState<Mesh>();\n    const [colors, setColors] = useState(COLORS);\n    const lightRef = useRef<PointLight>(null);\n    const lowLightRef = useRef<PointLight>(null);\n    const groupRef = useRef<Group>(null);\n    const lightPositionY = props.height * 0.8;\n    const [isFontLoaded, setIsFontLoaded] = useState(false);\n    const [isClicked, setIsClicked] = useState(false);\n\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        document.fonts.ready.then(function () {\n            setIsFontLoaded(true);\n        });\n    }, []);\n\n    const textRef = useCallback(node => {\n        if (node === null) {\n            return;\n        }\n\n        setTextRefNode(node);\n    }, []);\n\n    const lowLightPosition = useMemo(() => {\n        const lightPosition = new Vector3();\n        lightPosition.copy(props.position);\n        lightPosition.add(new Vector3(0, LOW_LIGHT_OFFSET, 0));\n\n        return lightPosition;\n    }, [props.position]);\n\n    const textScale: Vector3 = useMemo(() => {\n        const labelBaseScale = 0.15;\n        return new Vector3(\n            textCanvasWidth * labelBaseScale,\n            textCanvasHeight * labelBaseScale,\n            0\n        );\n    }, [textCanvasHeight, textCanvasWidth])\n\n    const textPosition = useMemo(() => {\n        if (!textRefNode) {\n            return;\n        }\n\n        const boundingBox: Box3 = new Box3().setFromObject(textRefNode);\n        const textLength = boundingBox.max.y - boundingBox.min.y;\n\n        // const normalizationFactor = 0.5;\n        const padding = 5;\n        return new Vector3(0, -textLength / 2 + (props.height) - padding, 11);\n    }, [props.height, textRefNode]);\n\n    const texture = useMemo(() => {\n        if (!isFontLoaded) {\n            return;\n        }\n\n        const size = 100;\n\n        const borderSize = 2;\n        const ctx = document.createElement('canvas').getContext('2d');\n\n        if (!ctx) {\n            throw new Error(`Could not create ctx`);\n        }\n\n        const font = `${size}px AuvantGothicBold, monospace`;\n        ctx.font = font;\n        // measure how long the name will be\n        const doubleBorderSize = borderSize * 2;\n        const width = ctx.measureText(props.text).width + doubleBorderSize;\n        const height = size + doubleBorderSize;\n        ctx.canvas.width = width;\n        ctx.canvas.height = height;\n\n        // need to set font again after resizing canvas\n        ctx.font = font;\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = 'black';\n        ctx.fillText(props.text, borderSize, borderSize);\n\n        setTextCanvasWidth(ctx.canvas.width);\n        setTextCanvasHeight(ctx.canvas.height);\n\n        const texture = new CanvasTexture(ctx.canvas);\n\n        // In combination with gl.setPixelRatio(window.devicePixelRatio) <- see canvas-content.tsx\n        // this makes the text sharper.\n        texture.minFilter = LinearFilter;\n\n        return texture\n    }, [props.text, isFontLoaded]);\n\n\n    function onPointerOver() {\n        setColors(COLORS_HOVER);\n        document.body.style.cursor = \"pointer\";\n    }\n\n    function onPointerOut() {\n        document.body.style.cursor = \"\";\n        if (isClicked) {\n            return;\n        }\n        setColors(COLORS);\n    }\n\n    function onClick() {\n        setColors(COLORS_HOVER);\n        setIsClicked(isClicked => !isClicked);\n        props.onClick();\n    }\n\n    return (\n        <>\n            <pointLight\n                ref={lowLightRef}\n                color={colors.light}\n                intensity={20}\n                distance={60}\n                decay={4}\n                position={lowLightPosition}\n                castShadow={true}\n            >\n                <pointLight\n                    ref={lightRef}\n                    color={colors.light}\n                    intensity={1.2}\n                    distance={350}\n                    decay={3}\n                    position={[0, lightPositionY - LOW_LIGHT_OFFSET, 0]}\n                    castShadow={true}\n                >\n                    <group\n                        ref={groupRef}\n                        position={[0, -lightPositionY - 10, 0]}\n                    >\n                        <mesh\n                            scale={[20, props.height, 20]}\n                            position={[0, props.height / 2, 0]}\n                            onPointerOver={onPointerOver}\n                            onClick={onClick}\n                            onPointerOut={onPointerOut}\n                        >\n                            <meshStandardMaterial\n                                emissive={new Color(colors.mesh)}\n                                emissiveIntensity={1}\n                                color={\"#000000\"}\n                            />\n\n                            <boxBufferGeometry\n                                args={[1, 1, 1]}/>\n                        </mesh>\n\n                        {texture &&\n                            <mesh\n                                position={textPosition}\n                                ref={textRef}\n                                scale={textScale}\n                                rotation={[0, 0, -Math.PI / 2]}\n                            >\n                                <meshBasicMaterial\n                                    map={texture}\n                                    side={DoubleSide}\n                                    transparent={true}\n                                />\n                                <planeGeometry\n                                    args={[1, 1]}\n                                />\n                            </mesh>\n                        }\n                    </group>\n\n                </pointLight>\n            </pointLight>\n        </>\n    );\n}","import React, {useEffect, useLayoutEffect, useRef} from \"react\";\nimport {BufferGeometry, InstancedMesh, Matrix4, MeshStandardMaterial} from \"three\";\nimport useRandomGenerator from \"../hooks/use-random\";\nimport {useFrame} from \"@react-three/fiber\";\nimport {Vector3} from \"three/src/math/Vector3\";\n\nexport interface CuboidsProps {\n    numCuboids: number;\n    worldSize: number;\n    lift: boolean;\n}\n\nexport default function Cuboids(props: CuboidsProps) {\n    const random = useRandomGenerator(4);\n    const instancedMeshRef = useRef<InstancedMesh>(null);\n    const gluedIndexes = useRef([...Array(props.numCuboids - 1)].map((item, index) => index));\n\n    useEffect(() => {\n        if (!props.lift) {\n            return;\n        }\n\n        setInterval(() => {\n            gluedIndexes.current.shift();\n        }, 20)\n\n    }, [props.lift])\n\n    useLayoutEffect(() => {\n        if (!instancedMeshRef.current) {\n            return;\n        }\n\n        const transform = new Matrix4();\n        for (let i = 0; i < props.numCuboids; i++) {\n\n            let height = random() * 160 + 100;\n\n            const x = random() * props.worldSize - props.worldSize / 2;\n            const y = 0;\n            const z = random() * props.worldSize - props.worldSize / 2;\n\n            if (Math.abs(x) <= 150 && z > -50) {\n                height = height * 0.8;\n            }\n\n            transform.makeScale(1, height, 1)\n            transform.setPosition(x, y, z);\n            instancedMeshRef.current.setMatrixAt(i, transform)\n        }\n    }, [props.numCuboids, props.worldSize, random]);\n\n    useFrame(({ clock }) => {\n        if (!props.lift || !instancedMeshRef.current) {\n            return;\n        }\n\n        const speed = 1;\n        const delta = clock.elapsedTime * speed;\n        const currentGluedIndexes = [...gluedIndexes.current];\n\n        for (let i = 0; i <= props.numCuboids; i++) {\n            if (currentGluedIndexes.indexOf(i) !== -1) {\n                continue;\n            }\n\n            const matrix = new Matrix4();\n            instancedMeshRef.current.getMatrixAt(i, matrix);\n            const position = new Vector3().setFromMatrixPosition(matrix);\n            position.add(new Vector3(0,delta,0));\n            matrix.setPosition(position);\n            instancedMeshRef.current.setMatrixAt(i, matrix);\n        }\n        instancedMeshRef.current.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n            <instancedMesh\n                args={[null as unknown as BufferGeometry, null as unknown as MeshStandardMaterial, props.numCuboids]}\n                ref={instancedMeshRef}\n                castShadow={true}\n                receiveShadow={true}\n            >\n                <meshStandardMaterial\n                    attach=\"material\"\n                    color=\"white\"\n                />\n                <boxBufferGeometry\n                    attach=\"geometry\"\n                    args={[20, 1, 20]} /*ref={ref => ref && ref.translate(0, 0.5, 0)}*/ />\n            </instancedMesh>\n    );\n}","import {useCallback, useRef} from \"react\";\n\nexport default function useRandomGenerator(sequenceSeed: number) {\n    const seed = useRef(sequenceSeed);\n\n    return useCallback((min = 0, max = 0.999) => {\n        function sinusRandom() {\n            const x = Math.sin(seed.current) * 10000;\n            seed.current ++;\n            return x - Math.floor(x);\n        }\n\n        const random = sinusRandom();\n        return Math.round((random * (max - min) + min) * 100) / 100\n    }, [seed]);\n}\n","import React, {useMemo, useState} from \"react\";\nimport Lightbulb from \"./lightbulb\";\nimport {Vector3} from \"three/src/math/Vector3\";\nimport Cuboids from \"./cuboids\";\n\nexport interface WorldProps {\n    numCuboids: number;\n    size: number;\n}\n\nexport default function World(props: WorldProps) {\n    const [isLightbulbClicked, setIsLightbulbClicked] = useState(false);\n\n    const lightbulbPositions = useMemo(() => {\n        return [\n            new Vector3(0, 0, 100),\n            new Vector3(115, 0, -105),\n            new Vector3(-100, 0, 35)\n        ]\n    }, []);\n\n\n\n    return (\n        <>\n            {/*<fog attach=\"fog\" args={['#53FAEB', 0.002, 1000]} />*/}\n            {/*<directionalLight position={[100, 100, 100]} color=\"ddred\" castShadow={true}/>*/}\n            {/*<directionalLight position={[-1, -1, -1]} color=\"#ffdw738\" castShadow={true} />*/}\n            <ambientLight color=\"white\" intensity={0.001}/>\n\n            <Cuboids numCuboids={props.numCuboids} worldSize={props.size} lift={isLightbulbClicked}/>\n\n            <Lightbulb\n                onClick={() => setIsLightbulbClicked(true)}\n                position={lightbulbPositions[2]}\n                text={\"THIRD\"}\n                height={175}\n            />\n            <Lightbulb\n                onClick={() => setIsLightbulbClicked(true)}\n                position={lightbulbPositions[0]}\n                text={\"FIRST\"}\n                height={160}\n            />\n            <Lightbulb\n                onClick={() => setIsLightbulbClicked(true)}\n                position={lightbulbPositions[1]}\n                text={\"SECOND\"}\n                height={185}\n            />\n\n            <mesh position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, 0]} receiveShadow={true}>\n                <planeBufferGeometry\n                    attach=\"geometry\"\n                    args={[props.size, props.size]}\n                />\n                <meshStandardMaterial\n                    attach=\"material\"\n                    color=\"white\"\n                    flatShading={true}\n                />\n            </mesh>\n        </>\n    );\n}","import React, {useEffect} from \"react\";\nimport BirdCamera from \"./bird-camera\";\nimport World from \"./world\";\nimport {PCFSoftShadowMap} from \"three\";\nimport {useThree} from \"@react-three/fiber\";\n\nexport default function CanvasContent() {\n    const {gl} = useThree();\n\n    useEffect(() => {\n        gl.shadowMap.enabled = true;\n        gl.shadowMap.type = PCFSoftShadowMap;\n\n        gl.setPixelRatio(window.devicePixelRatio)\n    }, [gl]);\n\n    return (\n        <>\n            <BirdCamera position={[0, 200, 700]}/>\n\n            <World\n                numCuboids={170}\n                size={1000}\n            />\n        </>\n    );\n}","import React, {useContext} from \"react\";\nimport {Canvas} from \"@react-three/fiber\";\nimport MovementContext from \"../contexts/movement-context\";\nimport CanvasContent from \"./canvas-content\";\nimport styled from \"styled-components\";\n\nconst StyledCanvas = styled(Canvas)`\n    canvas:focus {\n        outline: none;\n    }\n`\n\nexport default function ThreeCanvas() {\n    const movementContext = useContext(MovementContext);\n\n    return (\n        <StyledCanvas>\n            <MovementContext.Provider value={movementContext}>\n                <CanvasContent/>\n            </MovementContext.Provider>\n        </StyledCanvas>\n    );\n}","import {createGlobalStyle} from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n    html,\n    body,\n    #root {\n      width: 100%;\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n\n    html {\n      box-sizing: border-box;\n    }\n    *, *:before, *:after {\n      box-sizing: inherit;\n    }\n`;\n\nexport default GlobalStyle","import React from 'react';\n\nexport interface MovementContextActionsType {\n    setIsMovingForward: (isMovingForward: boolean) => void;\n    setIsMovingBackward: (isMovingBackward: boolean) => void;\n    setIsTurningLeft: (isTurningLeft: boolean) => void;\n    setIsTurningRight: (isTurningRight: boolean) => void;\n}\n\nexport const MovementContextActions = React.createContext<MovementContextActionsType>({\n    setIsMovingForward: () => undefined,\n    setIsMovingBackward: () => undefined,\n    setIsTurningLeft: () => undefined,\n    setIsTurningRight: () => undefined,\n});\n\nexport default MovementContextActions;\n","import {useMemo, useState} from \"react\";\nimport MovementContext from \"../movement-context\";\nimport MovementContextActions, {MovementContextActionsType} from \"../movement-context-actions\";\n\nexport interface MovementContextProviderProps {\n    children: React.ReactNode;\n}\n\nexport default function MovementContextProvider(props:MovementContextProviderProps) {\n    const [isMovingForward, setIsMovingForward] = useState(false);\n    const [isMovingBackward, setIsMovingBackward] = useState(false);\n    const [isTurningLeft, setIsTurningLeft] = useState(false);\n    const [isTurningRight, setIsTurningRight] = useState(false);\n\n    const movementContextActions: MovementContextActionsType = useMemo(() => {\n       return {\n           setIsMovingForward,\n           setIsMovingBackward,\n           setIsTurningLeft,\n           setIsTurningRight,\n       }\n    }, []);\n\n    return (\n        <MovementContext.Provider value={{isMovingForward, isMovingBackward, isTurningLeft, isTurningRight}}>\n            <MovementContextActions.Provider value={movementContextActions}>\n                {props.children}\n            </MovementContextActions.Provider>\n        </MovementContext.Provider>\n    )\n}","export default __webpack_public_path__ + \"static/media/arrow-white.fb6e3d97.svg\";","export default __webpack_public_path__ + \"static/media/arrow-white-pressed.acc87111.svg\";","import React, {useContext, useEffect} from \"react\";\nimport MovementContextActions from \"../contexts/movement-context-actions\";\nimport styled, {css} from \"styled-components\";\n\nimport arrowWhite from '../images/arrow-white.svg';\nimport arrowWhitePressed from '../images/arrow-white-pressed.svg';\nimport MovementContext from \"../contexts/movement-context\";\n\nconst ButtonSize = \"50px\";\n\nconst ButtonMixin = (isActive: boolean) => css`\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    cursor: pointer;\n\n    background-image: url(${arrowWhite});\n    ${isActive && css`\n        background-image: url(${arrowWhitePressed});\n    `}\n\n`\n\nconst StyledButtonUp = styled.div<{ isActive: boolean }>`\n    grid-row: 1;\n    grid-column: 2;\n    ${props => ButtonMixin(props.isActive)};\n\n`\n\nconst StyledButtonLeft = styled.div<{ isActive: boolean }>`\n    grid-row: 2;\n    grid-column: 1;\n    transform: rotate(-90deg);\n    ${props => ButtonMixin(props.isActive)};\n`\n\nconst StyledButtonRight = styled.div<{ isActive: boolean }>`\n    grid-row: 2;\n    grid-column: 3;\n    transform: rotate(90deg);\n    ${props => ButtonMixin(props.isActive)};\n`\n\nconst StyledButtonDown = styled.div<{ isActive: boolean }>`\n    grid-row: 3;\n    grid-column: 2;\n    transform: rotate(180deg);\n    ${props => ButtonMixin(props.isActive)};\n`\n\nconst StyledRoot = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    position: absolute;\n    flex-direction: column;\n\n    bottom: 0;\n    padding-bottom: calc(${ButtonSize} / 2);\n    padding-right: calc(${ButtonSize} / 2);\n    align-items: flex-end;\n\n\n    @media (min-width: 768px) {\n        align-items: center;\n        bottom: 8%;\n        right: unset;\n        padding-right: 0;\n        padding-bottom: 0;\n    }\n`\n\nconst StyledGrid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(3, ${ButtonSize});\n    grid-template-rows: repeat(3, ${ButtonSize});\n    user-select: none;\n`\n\nconst StyledText = styled.div`\n    margin-top: 20px;\n    color: white;\n    font-family: \"SourceCodePro\", monospace;\n    display: none;\n    text-align: center;\n\n    @media (min-width: 768px) {\n        display: block;\n    }\n`\n\nexport default function CameraControlButtons() {\n    const movementContextActions = useContext(MovementContextActions);\n    const movementContext = useContext(MovementContext);\n\n    useEffect(() => {\n        function onKeyDown(event: KeyboardEvent) {\n            switch (event.code) {\n                case 'ArrowUp':\n                case 'KeyW':\n                    movementContextActions.setIsMovingForward(true);\n                    break;\n\n                case 'ArrowLeft':\n                case 'KeyA':\n                    movementContextActions.setIsTurningLeft(true);\n                    break;\n\n                case 'ArrowDown':\n                case 'KeyS':\n                    movementContextActions.setIsMovingBackward(true);\n                    break;\n\n                case 'ArrowRight':\n                case 'KeyD':\n                    movementContextActions.setIsTurningRight(true);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        function onKeyUp(event: KeyboardEvent) {\n            switch (event.code) {\n                case 'ArrowUp':\n                case 'KeyW':\n                    movementContextActions.setIsMovingForward(false);\n                    break;\n\n                case 'ArrowLeft':\n                case 'KeyA':\n                    movementContextActions.setIsTurningLeft(false);\n                    break;\n\n                case 'ArrowDown':\n                case 'KeyS':\n                    movementContextActions.setIsMovingBackward(false);\n                    break;\n\n                case 'ArrowRight':\n                case 'KeyD':\n                    movementContextActions.setIsTurningRight(false);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        window.addEventListener('keydown', onKeyDown);\n        window.addEventListener('keyup', onKeyUp);\n\n        return () => {\n            window.removeEventListener('keydown', onKeyDown);\n            window.addEventListener('keyup', onKeyUp);\n        }\n    }, [movementContextActions])\n\n    return (\n        <StyledRoot>\n            <StyledGrid>\n                <StyledButtonUp\n                    isActive={movementContext.isMovingForward}\n                    onMouseDown={() => movementContextActions.setIsMovingForward(true)}\n                    onTouchStart={() => movementContextActions.setIsMovingForward(true)}\n                    onMouseUp={() => movementContextActions.setIsMovingForward(false)}\n                    onTouchEnd={() => movementContextActions.setIsMovingForward(false)}\n                />\n\n                <StyledButtonDown\n                    isActive={movementContext.isMovingBackward}\n                    onMouseDown={() => movementContextActions.setIsMovingBackward(true)}\n                    onTouchStart={() => movementContextActions.setIsMovingBackward(true)}\n                    onMouseUp={() => movementContextActions.setIsMovingBackward(false)}\n                    onTouchEnd={() => movementContextActions.setIsMovingBackward(false)}\n                />\n\n                <StyledButtonLeft\n                    isActive={movementContext.isTurningLeft}\n                    onMouseDown={() => movementContextActions.setIsTurningLeft(true)}\n                    onTouchStart={() => movementContextActions.setIsTurningLeft(true)}\n                    onMouseUp={() => movementContextActions.setIsTurningLeft(false)}\n                    onTouchEnd={() => movementContextActions.setIsTurningLeft(false)}\n                />\n\n                <StyledButtonRight\n                    isActive={movementContext.isTurningRight}\n                    onMouseDown={() => movementContextActions.setIsTurningRight(true)}\n                    onTouchStart={() => movementContextActions.setIsTurningRight(true)}\n                    onMouseUp={() => movementContextActions.setIsTurningRight(false)}\n                    onTouchEnd={() => movementContextActions.setIsTurningRight(false)}\n                />\n            </StyledGrid>\n\n\n            <StyledText>\n                Click the arrows to navigate <br/>\n                {\"Or use W, A, S, D on your keyboard\"}\n            </StyledText>\n        </StyledRoot>\n    );\n}","import React from \"react\";\n\nexport type Device = \"small\" | \"large\"\n\nexport interface DeviceContextType {\n    device: Device;\n}\n\nexport const DeviceContext = React.createContext<DeviceContextType>({\n    device: \"large\",\n});\n\nexport default DeviceContext;\n","import React, {useCallback, useEffect, useState} from \"react\";\nimport DeviceContext, {Device} from \"../device-context\";\n\nexport interface DeviceContextProviderProps {\n    children: React.ReactNode;\n}\n\nexport default function DeviceContextProvider(props: DeviceContextProviderProps) {\n    const getActiveDevice = useCallback(() => {\n        if (window.innerWidth > 768) {\n            return \"large\";\n        }\n        return \"small\";\n    }, []);\n\n    const [device, setDevice] = useState<Device>(getActiveDevice());\n\n    useEffect(() => {\n        function handleResize() {\n            setDevice(getActiveDevice());\n        }\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [getActiveDevice]);\n\n    return (\n        <DeviceContext.Provider value={{device}}>\n            {props.children}\n        </DeviceContext.Provider>\n    );\n}","import React, {useEffect, useState} from 'react'\nimport styled from \"styled-components\";\nimport ThreeCanvas from \"./components/three-canvas\";\nimport GlobalStyle from \"./style/global-style\";\nimport MovementContextProvider from \"./contexts/providers/movement-context-provider\";\nimport CameraControlButtons from \"./components/camera-control-buttons\";\nimport DeviceContextProvider from \"./contexts/providers/device-context-provider\";\nimport \"./style/font-faces.css\";\n\nconst StyledRoot = styled.div`\n    background-color: black;\n    width: 100%;\n    height: 100%;\n    position: relative;\n`\n\n// Workaround to make the font available as a texture in lightbulb.tsx\nconst StyledFontWorkaround = styled.div`\n    font-family: \"AuvantGothicBold\", sans-serif;\n    position: absolute;\n    z-index: -99;\n`\n\nfunction App() {\n    const [isFirstRender, setIsFirstRender] = useState(true);\n\n    useEffect(() => {\n        setIsFirstRender(false);\n    }, [])\n\n    return (\n        <StyledRoot>\n            {isFirstRender &&\n                <StyledFontWorkaround>TEXT</StyledFontWorkaround>\n            }\n            <GlobalStyle/>\n            <DeviceContextProvider>\n                <MovementContextProvider>\n                    <ThreeCanvas/>\n                    <CameraControlButtons/>\n                </MovementContextProvider>\n            </DeviceContextProvider>\n        </StyledRoot>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {ReactThreeFiber} from \"@react-three/fiber\";\nimport {MapControls, OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\nimport {FirstPersonControls} from \"three/examples/jsm/controls/FirstPersonControls\";\nimport {FlyControls} from \"three/examples/jsm/controls/FlyControls\";\nimport {BirdControlsType} from \"./birdControls/birdControlsType\";\n\ndeclare global {\n    namespace JSX {\n        interface IntrinsicElements {\n            mapControls: ReactThreeFiber.Object3DNode<MapControls, typeof MapControls>,\n            firstPersonControls: ReactThreeFiber.Object3DNode<FirstPersonControls, typeof FirstPersonControls>,\n            flyControls: ReactThreeFiber.Object3DNode<FlyControls, typeof FlyControls>,\n            orbitControls: ReactThreeFiber.Object3DNode<OrbitControls, typeof OrbitControls>,\n            birdControls: ReactThreeFiber.Object3DNode<BirdControlsType, typeof BirdControlsType>,\n        }\n    }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}